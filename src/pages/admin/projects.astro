---
import AdminLayout from '../../layouts/AdminLayout.astro';
---

<AdminLayout title="Projects Management">
  <div class="space-y-6">
    <!-- Header with Create Button -->
    <div class="flex justify-between items-center">
      <div>
        <h2 class="text-xl font-semibold text-gray-900">All Projects</h2>
        <p class="text-gray-600">Manage your project showcase</p>
      </div>
      <button id="create-project-btn" class="bg-primary text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
        Add New Project
      </button>
    </div>

    <!-- Projects Grid -->
    <div id="projects-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <div class="col-span-full text-center text-gray-500 py-8">
        Loading projects...
      </div>
    </div>
  </div>

  <!-- Create/Edit Project Modal -->
  <div id="project-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-screen overflow-y-auto">
        <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
          <h3 id="modal-title" class="text-lg font-medium text-gray-900">Add New Project</h3>
          <button id="close-modal" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <form id="project-form" class="p-6 space-y-6">
          <input type="hidden" id="project-id" />
          
          <div>
            <label for="project-title" class="block text-sm font-medium text-gray-700 mb-2">Title</label>
            <input 
              type="text" 
              id="project-title" 
              required 
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              placeholder="Enter project title"
            />
          </div>
          
          <div>
            <label for="project-description" class="block text-sm font-medium text-gray-700 mb-2">Description</label>
            <textarea 
              id="project-description" 
              rows="4" 
              required 
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              placeholder="Describe your project"
            ></textarea>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="project-url" class="block text-sm font-medium text-gray-700 mb-2">Project URL</label>
              <input 
                type="url" 
                id="project-url" 
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                placeholder="https://example.com"
              />
            </div>
            
            <div>
              <label for="project-github" class="block text-sm font-medium text-gray-700 mb-2">GitHub URL</label>
              <input 
                type="url" 
                id="project-github" 
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                placeholder="https://github.com/username/repo"
              />
            </div>
          </div>
          
          <div>
            <label for="project-status" class="block text-sm font-medium text-gray-700 mb-2">Status</label>
            <select 
              id="project-status" 
              required 
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            >
              <option value="active">Active</option>
              <option value="maintained">Maintained</option>
              <option value="archived">Archived</option>
            </select>
          </div>
          
          <div>
            <label for="project-technologies" class="block text-sm font-medium text-gray-700 mb-2">Technologies</label>
            <input 
              type="text" 
              id="project-technologies" 
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              placeholder="React, Node.js, PostgreSQL (comma-separated)"
            />
            <p class="text-sm text-gray-500 mt-1">Separate technologies with commas</p>
          </div>
          
          <div class="flex justify-end space-x-3 pt-6 border-t border-gray-200">
            <button type="button" id="cancel-btn" class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors">
              Cancel
            </button>
            <button type="submit" id="save-btn" class="px-4 py-2 bg-primary text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50">
              <span id="save-text">Save Project</span>
              <span id="save-loading" class="hidden">Saving...</span>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    import { getAllProjects, createProject, updateProject, deleteProject } from '../../lib/supabase';

    let projects = [];
    let editingProjectId = null;

    // DOM elements
    const projectsContainer = document.getElementById('projects-container');
    const projectModal = document.getElementById('project-modal');
    const projectForm = document.getElementById('project-form');
    const modalTitle = document.getElementById('modal-title');
    
    const createProjectBtn = document.getElementById('create-project-btn');
    const closeModalBtn = document.getElementById('close-modal');
    const cancelBtn = document.getElementById('cancel-btn');
    
    const projectIdInput = document.getElementById('project-id');
    const titleInput = document.getElementById('project-title');
    const descriptionInput = document.getElementById('project-description');
    const urlInput = document.getElementById('project-url');
    const githubInput = document.getElementById('project-github');
    const statusInput = document.getElementById('project-status');
    const technologiesInput = document.getElementById('project-technologies');
    
    const saveBtn = document.getElementById('save-btn');
    const saveText = document.getElementById('save-text');
    const saveLoading = document.getElementById('save-loading');

    // Load projects
    async function loadProjects() {
      try {
        projects = await getAllProjects();
        renderProjects();
      } catch (error) {
        console.error('Failed to load projects:', error);
        projectsContainer.innerHTML = '<div class="col-span-full text-center text-red-500 py-8">Failed to load projects</div>';
      }
    }

    // Render projects grid
    function renderProjects() {
      if (projects.length === 0) {
        projectsContainer.innerHTML = '<div class="col-span-full text-center text-gray-500 py-8">No projects yet. Add your first project!</div>';
        return;
      }

      projectsContainer.innerHTML = projects.map(project => {
        const statusColors = {
          active: 'bg-green-100 text-green-800',
          maintained: 'bg-blue-100 text-blue-800',
          archived: 'bg-gray-100 text-gray-800'
        };

        return `
          <div class="bg-white rounded-lg shadow border border-gray-200 p-6">
            <div class="flex items-start justify-between mb-4">
              <h3 class="text-lg font-semibold text-gray-900">${project.title}</h3>
              <span class="px-2 py-1 text-xs font-medium rounded-full ${statusColors[project.status]}">
                ${project.status.charAt(0).toUpperCase() + project.status.slice(1)}
              </span>
            </div>
            
            <p class="text-gray-600 mb-4">${project.description}</p>
            
            <div class="flex flex-wrap gap-2 mb-4">
              ${project.technologies.map(tech => `
                <span class="px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded">${tech}</span>
              `).join('')}
            </div>
            
            <div class="flex items-center justify-between">
              <div class="flex space-x-2">
                ${project.url ? `<a href="${project.url}" target="_blank" class="text-blue-600 hover:text-blue-800 text-sm">Live</a>` : ''}
                ${project.github_url ? `<a href="${project.github_url}" target="_blank" class="text-gray-600 hover:text-gray-800 text-sm">GitHub</a>` : ''}
              </div>
              <div class="flex space-x-2">
                <button onclick="editProject('${project.id}')" class="text-blue-600 hover:text-blue-800 text-sm">
                  Edit
                </button>
                <button onclick="deleteProjectConfirm('${project.id}')" class="text-red-600 hover:text-red-800 text-sm">
                  Delete
                </button>
              </div>
            </div>
          </div>
        `;
      }).join('');
    }

    // Modal controls
    createProjectBtn?.addEventListener('click', () => openModal());
    closeModalBtn?.addEventListener('click', () => closeModal());
    cancelBtn?.addEventListener('click', () => closeModal());

    // Form submission
    projectForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      await saveProject();
    });

    function openModal(project = null) {
      editingProjectId = project?.id || null;
      modalTitle.textContent = project ? 'Edit Project' : 'Add New Project';
      
      if (project) {
        projectIdInput.value = project.id;
        titleInput.value = project.title;
        descriptionInput.value = project.description;
        urlInput.value = project.url || '';
        githubInput.value = project.github_url || '';
        statusInput.value = project.status;
        technologiesInput.value = project.technologies.join(', ');
      } else {
        projectForm.reset();
        projectIdInput.value = '';
      }
      
      projectModal.classList.remove('hidden');
      titleInput.focus();
    }

    function closeModal() {
      projectModal.classList.add('hidden');
      editingProjectId = null;
    }

    async function saveProject() {
      const technologies = technologiesInput.value
        .split(',')
        .map(tech => tech.trim())
        .filter(tech => tech.length > 0);

      const projectData = {
        title: titleInput.value.trim(),
        description: descriptionInput.value.trim(),
        url: urlInput.value.trim() || null,
        github_url: githubInput.value.trim() || null,
        status: statusInput.value,
        technologies
      };

      // Validation
      if (!projectData.title || !projectData.description) {
        alert('Please fill in all required fields');
        return;
      }

      // Show loading
      saveBtn.disabled = true;
      saveText.classList.add('hidden');
      saveLoading.classList.remove('hidden');

      try {
        let result;
        if (editingProjectId) {
          result = await updateProject(editingProjectId, projectData);
        } else {
          result = await createProject(projectData);
        }

        if (result.success) {
          closeModal();
          await loadProjects();
        } else {
          alert('Error saving project: ' + result.error);
        }
      } catch (error) {
        console.error('Save error:', error);
        alert('An unexpected error occurred');
      } finally {
        saveBtn.disabled = false;
        saveText.classList.remove('hidden');
        saveLoading.classList.add('hidden');
      }
    }

    // Global functions for inline event handlers
    window.editProject = (id) => {
      const project = projects.find(p => p.id === id);
      if (project) openModal(project);
    };

    window.deleteProjectConfirm = async (id) => {
      const project = projects.find(p => p.id === id);
      if (!project) return;

      if (confirm(`Are you sure you want to delete "${project.title}"?`)) {
        const result = await deleteProject(id);
        if (result.success) {
          await loadProjects();
        } else {
          alert('Error deleting project: ' + result.error);
        }
      }
    };

    // Load projects on page load
    loadProjects();
  </script>
</AdminLayout>
