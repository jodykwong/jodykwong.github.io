---
// Admin login page
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Admin Login" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>Admin Login</title>
    <style>
      /* Tailwind CSS styles */
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: system-ui, -apple-system, sans-serif;
        background-color: #f9fafb;
        color: #111827;
      }

      .min-h-screen { min-height: 100vh; }
      .flex { display: flex; }
      .items-center { align-items: center; }
      .justify-center { justify-content: center; }
      .py-12 { padding-top: 3rem; padding-bottom: 3rem; }
      .px-4 { padding-left: 1rem; padding-right: 1rem; }
      .max-w-md { max-width: 28rem; }
      .w-full { width: 100%; }
      .space-y-8 > * + * { margin-top: 2rem; }
      .space-y-6 > * + * { margin-top: 1.5rem; }
      .mt-6 { margin-top: 1.5rem; }
      .mt-2 { margin-top: 0.5rem; }
      .mt-8 { margin-top: 2rem; }
      .text-center { text-align: center; }
      .text-3xl { font-size: 1.875rem; line-height: 2.25rem; }
      .text-sm { font-size: 0.875rem; line-height: 1.25rem; }
      .font-extrabold { font-weight: 800; }
      .text-gray-900 { color: #111827; }
      .text-gray-600 { color: #4b5563; }
      .text-red-700 { color: #b91c1c; }
      .text-white { color: #ffffff; }
      .rounded-md { border-radius: 0.375rem; }
      .shadow-sm { box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05); }
      .border { border-width: 1px; }
      .border-gray-300 { border-color: #d1d5db; }
      .border-red-200 { border-color: #fecaca; }
      .border-transparent { border-color: transparent; }
      .bg-red-50 { background-color: #fef2f2; }
      .bg-blue-600 { background-color: #2563eb; }
      .hover\:bg-blue-700:hover { background-color: #1d4ed8; }
      .px-3 { padding-left: 0.75rem; padding-right: 0.75rem; }
      .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
      .px-4 { padding-left: 1rem; padding-right: 1rem; }
      .py-3 { padding-top: 0.75rem; padding-bottom: 0.75rem; }
      .rounded { border-radius: 0.25rem; }
      .rounded-t-md { border-top-left-radius: 0.375rem; border-top-right-radius: 0.375rem; }
      .rounded-b-md { border-bottom-left-radius: 0.375rem; border-bottom-right-radius: 0.375rem; }
      .focus\:outline-none:focus { outline: 2px solid transparent; outline-offset: 2px; }
      .focus\:ring-2:focus { box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5); }
      .focus\:border-blue-500:focus { border-color: #3b82f6; }
      .disabled\:opacity-50:disabled { opacity: 0.5; }
      .disabled\:cursor-not-allowed:disabled { cursor: not-allowed; }
      .hidden { display: none; }
      .relative { position: relative; }
      .block { display: block; }
      .appearance-none { appearance: none; }
      .sr-only { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0, 0, 0, 0); white-space: nowrap; border: 0; }
      .font-medium { font-weight: 500; }
      .cursor-pointer { cursor: pointer; }
      .transition-colors { transition-property: color, background-color, border-color; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }
      .hover\:text-blue-700:hover { color: #1d4ed8; }
      .-space-y-px > * + * { margin-top: -1px; }
      .z-10 { z-index: 10; }

      input {
        background-color: white;
      }

      input::placeholder {
        color: #6b7280;
      }

      button {
        cursor: pointer;
        transition: all 0.2s;
      }

      .primary-color { color: #2563eb; }
      .primary-bg { background-color: #2563eb; }
    </style>
  </head>
  <body class="bg-gray-50 text-gray-900 font-sans">
    <div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div class="max-w-md w-full space-y-8">
        <div>
          <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Admin Login
          </h2>
          <p class="mt-2 text-center text-sm text-gray-600">
            Sign in to access the admin dashboard
          </p>
        </div>
        
        <form id="login-form" class="mt-8 space-y-6">
          <div class="rounded-md shadow-sm -space-y-px">
            <div>
              <label for="email" class="sr-only">Email address</label>
              <input 
                id="email" 
                name="email" 
                type="email" 
                autocomplete="email" 
                required 
                class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-primary focus:border-primary focus:z-10 sm:text-sm" 
                placeholder="Email address"
              />
            </div>
            <div>
              <label for="password" class="sr-only">Password</label>
              <input 
                id="password" 
                name="password" 
                type="password" 
                autocomplete="current-password" 
                required 
                class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-primary focus:border-primary focus:z-10 sm:text-sm" 
                placeholder="Password"
              />
            </div>
          </div>

          <div id="error-message" class="hidden">
            <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
              <span id="error-text"></span>
            </div>
          </div>

          <div>
            <button
              type="submit"
              id="submit-btn"
              class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white primary-bg hover:bg-blue-700 focus:outline-none focus:ring-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span id="button-text">Sign in</span>
              <span id="loading-text" class="hidden">Signing in...</span>
            </button>
          </div>
          
          <div class="text-center">
            <a href="/" class="primary-color hover:text-blue-700 text-sm">
              ‚Üê Back to main site
            </a>
          </div>
        </form>
      </div>
    </div>

    <script type="module">
      import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

      // Initialize Supabase client
      const supabaseUrl = 'https://mcfrfutbunhccwfotjfa.supabase.co';
      const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1jZnJmdXRidW5oY2N3Zm90amZhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4MzIzODYsImV4cCI6MjA2NjQwODM4Nn0.4fFg8uc_0aukJSksQlW4ljV5ZfJK-lW9HPqw3s0FTw0';
      const supabase = createClient(supabaseUrl, supabaseAnonKey);

      // Admin authentication functions
      async function signInAdmin(email, password) {
        const { data, error } = await supabase.auth.signInWithPassword({
          email,
          password,
        });

        if (error) {
          return { success: false, error: error.message };
        }

        // Check if user is admin
        const { data: profile } = await supabase
          .from('profiles')
          .select('is_admin')
          .eq('id', data.user.id)
          .single();

        if (!profile?.is_admin) {
          await supabase.auth.signOut();
          return { success: false, error: 'Access denied. Admin privileges required.' };
        }

        return { success: true, data };
      }

      async function getCurrentUser() {
        const { data: { user } } = await supabase.auth.getUser();
        return user;
      }

      async function isCurrentUserAdmin() {
        const user = await getCurrentUser();
        if (!user) return false;

        const { data: profile } = await supabase
          .from('profiles')
          .select('is_admin')
          .eq('id', user.id)
          .single();

        return profile?.is_admin || false;
      }

      // Check if already logged in as admin
      async function checkExistingAuth() {
        try {
          const user = await getCurrentUser();
          if (user) {
            const isAdmin = await isCurrentUserAdmin();
            if (isAdmin) {
              window.location.href = '/admin/dashboard';
              return;
            }
          }
        } catch (error) {
          console.error('Auth check failed:', error);
        }
      }

      // Login form handling
      const form = document.getElementById('login-form');
      const emailInput = document.getElementById('email');
      const passwordInput = document.getElementById('password');
      const submitBtn = document.getElementById('submit-btn');
      const buttonText = document.getElementById('button-text');
      const loadingText = document.getElementById('loading-text');
      const errorMessage = document.getElementById('error-message');
      const errorText = document.getElementById('error-text');

      form?.addEventListener('submit', async (e) => {
        e.preventDefault();

        const email = emailInput.value.trim();
        const password = passwordInput.value;

        if (!email || !password) {
          showError('Please fill in all fields');
          return;
        }

        // Show loading state
        setLoading(true);
        hideError();

        try {
          const result = await signInAdmin(email, password);

          if (result.success) {
            // Redirect to dashboard
            window.location.href = '/admin/dashboard';
          } else {
            showError(result.error || 'Login failed');
          }
        } catch (error) {
          console.error('Login error:', error);
          showError('An unexpected error occurred: ' + error.message);
        } finally {
          setLoading(false);
        }
      });

      function setLoading(loading) {
        submitBtn.disabled = loading;
        if (loading) {
          buttonText.classList.add('hidden');
          loadingText.classList.remove('hidden');
        } else {
          buttonText.classList.remove('hidden');
          loadingText.classList.add('hidden');
        }
      }

      function showError(message) {
        errorText.textContent = message;
        errorMessage.classList.remove('hidden');
      }

      function hideError() {
        errorMessage.classList.add('hidden');
      }

      // Check existing auth on page load
      checkExistingAuth();
    </script>
  </body>
</html>
