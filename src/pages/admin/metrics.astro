---
import AdminLayout from '../../layouts/AdminLayout.astro';
---

<AdminLayout title="Metrics Management">
  <div class="space-y-6">
    <!-- Header -->
    <div>
      <h2 class="text-xl font-semibold text-gray-900">Metrics Management</h2>
      <p class="text-gray-600">Update your open dashboard metrics</p>
    </div>

    <!-- Current Month Metrics Form -->
    <div class="bg-white shadow rounded-lg">
      <div class="px-6 py-4 border-b border-gray-200">
        <h3 class="text-lg font-medium text-gray-900">Current Month Metrics</h3>
        <p class="text-sm text-gray-600 mt-1">Update metrics for <span id="current-month"></span></p>
      </div>
      
      <form id="metrics-form" class="p-6 space-y-6">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div>
            <label for="revenue" class="block text-sm font-medium text-gray-700 mb-2">
              Monthly Revenue ($)
            </label>
            <input 
              type="number" 
              id="revenue" 
              min="0" 
              step="1" 
              required 
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              placeholder="0"
            />
          </div>
          
          <div>
            <label for="users" class="block text-sm font-medium text-gray-700 mb-2">
              Active Users
            </label>
            <input 
              type="number" 
              id="users" 
              min="0" 
              step="1" 
              required 
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              placeholder="0"
            />
          </div>
          
          <div>
            <label for="expenses" class="block text-sm font-medium text-gray-700 mb-2">
              Monthly Expenses ($)
            </label>
            <input 
              type="number" 
              id="expenses" 
              min="0" 
              step="1" 
              required 
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              placeholder="0"
            />
          </div>
        </div>
        
        <div class="flex justify-end">
          <button 
            type="submit" 
            id="save-btn" 
            class="px-6 py-2 bg-primary text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
          >
            <span id="save-text">Update Metrics</span>
            <span id="save-loading" class="hidden">Updating...</span>
          </button>
        </div>
      </form>
    </div>

    <!-- Metrics History -->
    <div class="bg-white shadow rounded-lg">
      <div class="px-6 py-4 border-b border-gray-200">
        <h3 class="text-lg font-medium text-gray-900">Metrics History</h3>
        <p class="text-sm text-gray-600 mt-1">Historical data for your open dashboard</p>
      </div>
      
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Month
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Revenue
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Users
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Expenses
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Profit
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Growth
              </th>
            </tr>
          </thead>
          <tbody id="metrics-tbody" class="bg-white divide-y divide-gray-200">
            <tr>
              <td colspan="6" class="px-6 py-4 text-center text-gray-500">
                Loading metrics history...
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Quick Stats -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div class="bg-white rounded-lg shadow p-6">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <svg class="h-8 w-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
            </svg>
          </div>
          <div class="ml-5 w-0 flex-1">
            <dl>
              <dt class="text-sm font-medium text-gray-500 truncate">Total Revenue</dt>
              <dd class="text-lg font-medium text-gray-900" id="total-revenue">$0</dd>
            </dl>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow p-6">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <svg class="h-8 w-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 8v8m-4-5v5m-4-2v2m-2 4h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
          </div>
          <div class="ml-5 w-0 flex-1">
            <dl>
              <dt class="text-sm font-medium text-gray-500 truncate">Avg Monthly Growth</dt>
              <dd class="text-lg font-medium text-gray-900" id="avg-growth">0%</dd>
            </dl>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow p-6">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <svg class="h-8 w-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
          </div>
          <div class="ml-5 w-0 flex-1">
            <dl>
              <dt class="text-sm font-medium text-gray-500 truncate">Best Month</dt>
              <dd class="text-lg font-medium text-gray-900" id="best-month">-</dd>
            </dl>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    import { getAllMetrics, upsertMetrics } from '../../lib/supabase';

    let metricsHistory = [];
    const currentMonthYear = new Date().toISOString().slice(0, 7); // YYYY-MM format

    // DOM elements
    const currentMonthSpan = document.getElementById('current-month');
    const metricsForm = document.getElementById('metrics-form');
    const revenueInput = document.getElementById('revenue');
    const usersInput = document.getElementById('users');
    const expensesInput = document.getElementById('expenses');
    const saveBtn = document.getElementById('save-btn');
    const saveText = document.getElementById('save-text');
    const saveLoading = document.getElementById('save-loading');
    const metricsTbody = document.getElementById('metrics-tbody');

    // Initialize
    function init() {
      const monthNames = ["January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"];
      const [year, month] = currentMonthYear.split('-');
      currentMonthSpan.textContent = `${monthNames[parseInt(month) - 1]} ${year}`;
      
      loadMetrics();
    }

    // Load metrics
    async function loadMetrics() {
      try {
        metricsHistory = await getAllMetrics();
        
        // Load current month data if exists
        const currentMetrics = metricsHistory.find(m => m.month_year === currentMonthYear);
        if (currentMetrics) {
          revenueInput.value = currentMetrics.revenue.toString();
          usersInput.value = currentMetrics.users.toString();
          expensesInput.value = currentMetrics.expenses.toString();
        }
        
        renderMetricsHistory();
        updateQuickStats();
      } catch (error) {
        console.error('Failed to load metrics:', error);
        metricsTbody.innerHTML = '<tr><td colspan="6" class="px-6 py-4 text-center text-red-500">Failed to load metrics</td></tr>';
      }
    }

    // Render metrics history table
    function renderMetricsHistory() {
      if (metricsHistory.length === 0) {
        metricsTbody.innerHTML = '<tr><td colspan="6" class="px-6 py-4 text-center text-gray-500">No metrics data yet</td></tr>';
        return;
      }

      metricsTbody.innerHTML = metricsHistory.map((metrics, index) => {
        const profit = metrics.revenue - metrics.expenses;
        const prevMetrics = metricsHistory[index + 1];
        const growth = prevMetrics ? 
          ((metrics.revenue - prevMetrics.revenue) / prevMetrics.revenue * 100).toFixed(1) : 
          null;

        const [year, month] = metrics.month_year.split('-');
        const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
          "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        const monthDisplay = `${monthNames[parseInt(month) - 1]} ${year}`;

        return `
          <tr class="hover:bg-gray-50">
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
              ${monthDisplay}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
              $${metrics.revenue.toLocaleString()}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
              ${metrics.users.toLocaleString()}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
              $${metrics.expenses.toLocaleString()}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm ${profit >= 0 ? 'text-green-600' : 'text-red-600'}">
              $${profit.toLocaleString()}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm ${growth === null ? 'text-gray-500' : growth >= 0 ? 'text-green-600' : 'text-red-600'}">
              ${growth === null ? '-' : `${growth > 0 ? '+' : ''}${growth}%`}
            </td>
          </tr>
        `;
      }).join('');
    }

    // Update quick stats
    function updateQuickStats() {
      if (metricsHistory.length === 0) return;

      // Total revenue
      const totalRevenue = metricsHistory.reduce((sum, m) => sum + m.revenue, 0);
      document.getElementById('total-revenue').textContent = `$${totalRevenue.toLocaleString()}`;

      // Average growth
      const growthRates = [];
      for (let i = 0; i < metricsHistory.length - 1; i++) {
        const current = metricsHistory[i];
        const previous = metricsHistory[i + 1];
        if (previous.revenue > 0) {
          growthRates.push((current.revenue - previous.revenue) / previous.revenue * 100);
        }
      }
      const avgGrowth = growthRates.length > 0 ? 
        (growthRates.reduce((sum, rate) => sum + rate, 0) / growthRates.length).toFixed(1) : 
        0;
      document.getElementById('avg-growth').textContent = `${avgGrowth > 0 ? '+' : ''}${avgGrowth}%`;

      // Best month
      const bestMonth = metricsHistory.reduce((best, current) => 
        current.revenue > best.revenue ? current : best
      );
      const [year, month] = bestMonth.month_year.split('-');
      const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
        "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
      document.getElementById('best-month').textContent = 
        `${monthNames[parseInt(month) - 1]} ${year} ($${bestMonth.revenue.toLocaleString()})`;
    }

    // Form submission
    metricsForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const revenue = parseInt(revenueInput.value) || 0;
      const users = parseInt(usersInput.value) || 0;
      const expenses = parseInt(expensesInput.value) || 0;

      // Show loading
      saveBtn.disabled = true;
      saveText.classList.add('hidden');
      saveLoading.classList.remove('hidden');

      try {
        const result = await upsertMetrics({
          month_year: currentMonthYear,
          revenue,
          users,
          expenses
        });

        if (result.success) {
          await loadMetrics();
          alert('Metrics updated successfully!');
        } else {
          alert('Error updating metrics: ' + result.error);
        }
      } catch (error) {
        console.error('Save error:', error);
        alert('An unexpected error occurred');
      } finally {
        saveBtn.disabled = false;
        saveText.classList.remove('hidden');
        saveLoading.classList.add('hidden');
      }
    });

    // Initialize on page load
    init();
  </script>
</AdminLayout>
